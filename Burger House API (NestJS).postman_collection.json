{
	"info": {
		"_postman_id": "5d9d92bb-cb41-4961-8a6e-b0df1636817d",
		"name": "Burger House API (NestJS)",
		"description": "Postman collection generated from NestJS controllers.\n\nEnvironment variables expected:\n- baseUrl: Base URL of the API (e.g. http://localhost:3000)\n- jwt: Access token (auto-set by Auth responses' test scripts)\n\nNotes on auth:\n- Collection-level auth uses Bearer {{jwt}}. Public endpoints are explicitly set to 'noauth'.\n- Refresh token is delivered via HTTP-only cookie `refresh_token` by `/auth/signup`, `/auth/signin`, `/auth/google/callback`, and `/auth/refresh`. Postman automatically stores cookies per domain. If cookies don't persist, use the Postman Interceptor or the desktop app.\n\nOAuth:\n- `/auth/google` will redirect to Google; use a real browser flow. The `/auth/google/callback` endpoint is included mainly for reference/testing inside an integrated environment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39902080"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Signup (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 201 Created or 200 OK', function(){ pm.response.to.have.status.oneOf([200,201]); });",
									"try { var json = pm.response.json(); if (json.accessToken) pm.environment.set('jwt', json.accessToken); } catch(e) {}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Passw0rd!\",\n  \"name\": \"John\",\n  \"lastname\": \"Doe\",\n  \"mobile\": \"09000000000\",\n  \"address\": \"Test Street\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Registers a new user and sets `refresh_token` cookie + returns `accessToken`."
					},
					"response": []
				},
				{
					"name": "Signin (Local)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
									"try { var json = pm.response.json(); if (json.accessToken) pm.environment.set('jwt', json.accessToken); } catch(e) {}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"kiarash@example.com\",\n  \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signin"
							]
						},
						"description": "Authenticates user; sets `refresh_token` cookie and returns `accessToken`."
					},
					"response": []
				},
				{
					"name": "Google OAuth – Start",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/google",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"google"
							]
						},
						"description": "Starts Google OAuth flow (opens Google consent screen). Use browser; Postman will show redirect."
					},
					"response": []
				},
				{
					"name": "Google OAuth – Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
									"try { var json = pm.response.json(); if (json.accessToken) pm.environment.set('jwt', json.accessToken); } catch(e) {}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/google/callback",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"google",
								"callback"
							]
						},
						"description": "Callback endpoint after Google OAuth. In testing environments, may directly return tokens/user."
					},
					"response": []
				},
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function(){ pm.response.to.have.status(200); });",
									"try { var json = pm.response.json(); if (json.accessToken) pm.environment.set('jwt', json.accessToken); } catch(e) {}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Rotates refresh token using `refresh_token` cookie; returns a new `accessToken` and sets a new cookie."
					},
					"response": []
				},
				{
					"name": "Me (Get current user)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Returns the current authenticated user (requires Bearer {{jwt}})."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Revokes refresh token by cookie (if present) and clears it; returns { success: true }. Note: clears cookie only for path '/auth'."
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Requests a password reset email for the given address."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"21e4c47900e8787ab99e7fca8a73cd9e6a57ef659483ff78bc95947f4e47399a\",\n  \"newPassword\": \"NewStrongPassword#123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						},
						"description": "Resets password using the provided reset token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Categories",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Public: returns all categories."
					},
					"response": []
				},
				{
					"name": "Create Category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Burgers\",\n  \"desc\": \"Beef & chicken burgers\",\n  \"active\": true,\n  \"slug\":\"burger\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "ADMIN only: create a category. Requires Bearer {{jwt}} with ADMIN role."
					},
					"response": []
				},
				{
					"name": "Update Category",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sandwiches\",\n  \"active\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "ADMIN only: update a category by id (number). Requires Bearer {{jwt}} with ADMIN role."
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						},
						"description": "ADMIN only: remove a category by id. Requires Bearer {{jwt}} with ADMIN role."
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "List Items (with query)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						},
						"description": "Public: returns items using ItemQueryDto params.\nSupported query params may include:\n- search: string\n- categoryId: number\n- active: boolean\n- minPrice, maxPrice: number\n- page, limit, sort: implementation-specific"
					},
					"response": []
				},
				{
					"name": "Get Item by ID",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"5"
							]
						},
						"description": "Public: get a single item by numeric id."
					},
					"response": []
				},
				{
					"name": "Create Item (multipart/form-data)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Classic Burger",
									"type": "text"
								},
								{
									"key": "desc",
									"value": "Beef patty, cheese, lettuce, tomato",
									"type": "text"
								},
								{
									"key": "price",
									"value": "10",
									"type": "text"
								},
								{
									"key": "categoryId",
									"value": "1",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/USER/OneDrive/Pictures/conte.png"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						},
						"description": "ADMIN only: create an item with image upload.\n- Field `image` is required (file). Stored with `multer` diskStorage to `./uploads`.\n- Other fields: name (string), desc (string), price (number), categoryId (number), active (boolean, default true)."
					},
					"response": []
				},
				{
					"name": "Update Item",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Classic Burger XL\",\n  \"price\": 11,\n  \"active\": true,\n  \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"3"
							]
						},
						"description": "ADMIN only: partial update by id. Fields: name, desc, price, active, categoryId."
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						},
						"description": "ADMIN only: delete item by id."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"StrongPassword#123\",\n  \"name\": \"Alice\",\n  \"lastname\": \"Smith\",\n  \"mobile\": \"+491700000000\",\n  \"address\": \"Munich, DE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a user (controller is public here; adjust if you later add guards). Returns safe user DTO."
					},
					"response": []
				},
				{
					"name": "List Users",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "List all users (returns array of safe user DTOs). Consider protecting in production."
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						},
						"description": "Get a user by id (returns safe user DTO)."
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Alice Updated\",\n  \"address\": \"Hamburg, DE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"5"
							]
						},
						"description": "Update a user by id. Returns updated safe user DTO."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"5"
							]
						},
						"description": "Delete a user by id."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "List my cart",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": 1,\n  \"quantity\": 2,\n  \"note\": \"no pickles\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cart line",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quantity\": 5,\n  \"note\": \"extra cheese\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cart/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove cart line",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cart/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear entire cart",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "List all orders (Admin)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminJwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/admin/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"admin",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order status (Admin)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminJwt}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"preparing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/admin/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"admin",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create order from cart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"address\": \"Berlin, DE\",\n  \"paymentMethod\": \"card\",\n  \"note\": \"ring the bell\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List my orders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my order by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel my order",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "base_url",
			"value": "",
			"type": "default"
		}
	]
}